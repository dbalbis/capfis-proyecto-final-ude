@page "/Modulo/Aprender/{slug}"
@model CAPFIS.Pages.Modulo.AprenderModel
@using CAPFIS.Models

@{
    Layout = "/Pages/Shared/_LayoutModulo.cshtml";
    ViewData["Title"] = Model.Modulo?.Titulo ?? "Aprender";

    string videoUrl = "";
    if (Model.EtapaActual != null && Model.EtapaActual.Tipo == TipoEtapa.Video)
    {
        videoUrl = Model.EtapaActual.ContenidoUrl ?? "";
        if (videoUrl.Contains("youtu.be/"))
        {
            var videoId = videoUrl.Split("/").Last().Split("?").First();
            videoUrl = $"https://www.youtube.com/embed/{videoId}";
        }
        else if (videoUrl.Contains("watch?v="))
        {
            videoUrl = videoUrl.Replace("watch?v=", "embed/");
        }
    }

    List<QuizPregunta> quizData = new List<QuizPregunta>();
    if (Model.EtapaActual != null && Model.EtapaActual.Tipo == TipoEtapa.Quiz
        && !string.IsNullOrEmpty(Model.EtapaActual.ContenidoJson))
    {
        quizData = System.Text.Json.JsonSerializer
            .Deserialize<List<QuizPregunta>>(Model.EtapaActual.ContenidoJson)!;
    }
}

@if (Model.Modulo != null && Model.EtapaActual != null)
{
    <div class="container py-5 d-flex flex-column align-items-center justify-content-center">
        <h2 class="text-center mb-3">@Model.Modulo.Titulo</h2>
        <h4 class="text-center mb-4">@Model.EtapaActual.Titulo</h4>

        <partial name="_StatusMessage" model="Model.StatusMessage" />

        <div class="w-100 d-flex justify-content-center mb-4">
            @switch (Model.EtapaActual.Tipo)
            {
                case TipoEtapa.Video:
                    <div class="ratio ratio-16x9 w-75 mx-auto mb-4">
                        <iframe width="560" height="315"
                                src="@videoUrl"
                                title="@Model.EtapaActual.Titulo"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                referrerpolicy="strict-origin-when-cross-origin"
                                allowfullscreen>
                        </iframe>
                    </div>
                    break;

                case TipoEtapa.Quiz:
                    @if (quizData.Count > 0)
                    {
                        <div class="w-75 text-start p-3 border rounded bg-light text-dark">
                            <form id="quizForm">
                                @for (int qNum = 0; qNum < quizData.Count; qNum++)
                                {
                                    var pregunta = quizData[qNum];
                                    <div class="mb-4">
                                        <p class="fw-bold">@(@qNum + 1). @pregunta.Pregunta</p>
                                        @for (int idx = 0; idx < pregunta.Respuestas.Count; idx++)
                                        {
                                            var r = pregunta.Respuestas[idx];
                                            <div class="form-check">
                                                <input class="form-check-input"
                                                       type="radio"
                                                       name="pregunta@(@qNum + 1)"
                                                       id="pregunta@(@qNum + 1)_@idx"
                                                       value="@idx" />
                                                <label class="form-check-label" for="pregunta@(@qNum + 1)_@idx">@r</label>
                                            </div>
                                        }
                                    </div>
                                }
                            </form>
                            <div id="quizResult" class="mb-3 fw-bold text-danger"></div>
                        </div>
                    }
                    else
                    {
                        <p>No hay preguntas cargadas.</p>
                    }
                    break;

                case TipoEtapa.Ahorcado:
                    <div class="w-75 text-center p-3 border rounded bg-light text-dark">
                        <p>Mostrar juego Ahorcado</p>
                    </div>
                    break;

                case TipoEtapa.SopaDeLetras:
                    <div class="w-75 text-center p-3 border rounded bg-light text-dark">
                        <p>Mostrar Sopa de Letras</p>
                    </div>
                    break;

                case TipoEtapa.EncuentraLaPalabra:
                    <div class="w-75 text-center p-3 border rounded bg-light text-dark">
                        <p>Mostrar Encuentra la Palabra</p>
                    </div>
                    break;
            }
        </div>

        <form method="post" id="continuarForm" class="mt-3 d-flex justify-content-center">
            <input type="hidden" name="ModuloId" value="@Model.Modulo.Id" />
            <button type="submit" id="continuarBtn" class="btn btn-primary btn-lg px-4 py-3">
                Continuar
            </button>
        </form>
    </div>

    @if (Model.EtapaActual.Tipo == TipoEtapa.Quiz && quizData.Count > 0)
    {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const quizData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(quizData));
                const continuarForm = document.getElementById("continuarForm");
                const quizError = document.getElementById("quizResult");

                function calcularScore() {
                    let score = 0;
                    for (let i = 0; i < quizData.length; i++) {
                        const radios = document.getElementsByName(`pregunta${i + 1}`);
                        let answered = false;
                        radios.forEach(r => {
                            if (r.checked) answered = true;
                            // Ajuste aquí: sumamos 1 al índice porque tu JSON es 1-indexed
                            if (r.checked && (parseInt(r.value) + 1) === quizData[i].Correcta) score++;
                        });
                        if (!answered) return -1; // falta responder alguna
                    }
                    return score;
                }

                continuarForm.addEventListener("submit", (e) => {
                    const score = calcularScore();
                    if(score === -1) {
                        e.preventDefault();
                        quizError.innerText = "Debes responder todas las preguntas antes de continuar.";
                        return;
                    }
                    const porcentaje = (score / quizData.length) * 100;
                    if(porcentaje < 90) {
                        e.preventDefault();
                        quizError.innerText = `Debes responder al menos el 90% correctamente para continuar. Has respondido ${score} de ${quizData.length}.`;
                        return;
                    }
                    quizError.innerText = ""; // todo correcto, envía formulario
                });
            });
        </script>

    }
}
else
{
    <div class="container py-5 text-center">
        <p class="text-danger fw-bold">Módulo o etapa no encontrado.</p>
    </div>
}
