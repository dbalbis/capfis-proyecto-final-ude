@page "/Modulo/Aprender/{slug}"
@model CAPFIS.Pages.Modulo.AprenderModel
@using CAPFIS.Models
@using System.Text.Json.Nodes

@{
    Layout = "/Pages/Shared/_LayoutModulo.cshtml";
    ViewData["Title"] = Model.Modulo?.Titulo ?? "Aprender";

    string videoUrl = "";
    if (Model.EtapaActual != null && Model.EtapaActual.Tipo == TipoEtapa.Video)
    {
        videoUrl = Model.EtapaActual.ContenidoUrl ?? "";
        if (videoUrl.Contains("youtu.be/"))
        {
            var videoId = videoUrl.Split("/").Last().Split("?").First();
            videoUrl = $"https://www.youtube.com/embed/{videoId}";
        }
        else if (videoUrl.Contains("watch?v="))
        {
            videoUrl = videoUrl.Replace("watch?v=", "embed/");
        }
    }

    List<QuizPregunta> quizData = new List<QuizPregunta>();
    if (Model.EtapaActual != null && Model.EtapaActual.Tipo == TipoEtapa.Quiz
        && !string.IsNullOrEmpty(Model.EtapaActual.ContenidoJson))
    {
        quizData = System.Text.Json.JsonSerializer
            .Deserialize<List<QuizPregunta>>(Model.EtapaActual.ContenidoJson)!;
    }

    string textoEncuentraPalabra = "";
    List<string> palabrasClaveEncuentra = new List<string>();

    if (Model.EtapaActual?.Tipo == TipoEtapa.EncuentraLaPalabra && !string.IsNullOrEmpty(Model.EtapaActual.ContenidoJson))
    {
        var contenido = JsonNode.Parse(Model.EtapaActual.ContenidoJson);
        textoEncuentraPalabra = contenido?["Texto"]?.ToString() ?? "";
        palabrasClaveEncuentra = contenido?["PalabrasClave"]?.AsArray().Select(p => p.ToString()).ToList() ?? new List<string>();
    }
}

@if (Model.Modulo != null && Model.EtapaActual != null)
{
    <div class="container-fluid">
        <div class="main-container fade-in" style="background-color:#212529;">
            <!-- Header del Módulo -->
            <div class="module-header">
                <h2 class="module-title">@Model.Modulo.Titulo</h2>
                <h4 class="stage-title">@Model.EtapaActual.Titulo</h4>
            </div>

            <partial name="_StatusMessage" model="Model.StatusMessage" />

            <div class="w-100 d-flex justify-content-center mb-4" >
                @switch (Model.EtapaActual.Tipo)
                {
                    case TipoEtapa.Video:
                        <div class="content-card video-card w-100 text-center text-dark" style="border-radius:12px; overflow:hidden; background-color:#212529;">
                            <div class="video-container w-100 mx-auto">
                                <div class="ratio ratio-16x9" style="border-radius:12px; overflow:hidden;">
                                    <iframe src="@videoUrl"
                                            title="@Model.EtapaActual.Titulo"
                                            frameborder="0"
                                            allowfullscreen
                                            style="width:100%; height:100%; border:none; display:block;"></iframe>
                                </div>
                            </div>
                        </div>

                        break;

                    case TipoEtapa.Quiz:
                        @if (quizData.Count > 0)
                        {
                            <div class="content-card quiz-card w-100 text-dark">
                                <h5 class="text-center mb-4">Responde todas las preguntas</h5>
                                <form id="quizForm">
                                    @for (int qNum = 0; qNum < quizData.Count; qNum++)
                                    {
                                        var pregunta = quizData[qNum];
                                        <div class="quiz-question">
                                            <p class="fw-bold mb-3">@(@qNum + 1). @pregunta.Pregunta</p>
                                            @for (int idx = 0; idx < pregunta.Respuestas.Count; idx++)
                                            {
                                                var r = pregunta.Respuestas[idx];
                                                <div class="form-check mb-2">
                                                    <input class="form-check-input"
                                                           type="radio"
                                                           name="pregunta@(@qNum + 1)"
                                                           id="pregunta@(@qNum + 1)_@idx"
                                                           value="@idx" />
                                                    <label class="form-check-label fs-6" for="pregunta@(@qNum + 1)_@idx">@r</label>
                                                </div>
                                            }
                                        </div>
                                    }
                                </form>
                                <div id="quizResult" class="mb-3 fw-bold text-center"></div>
                            </div>
                        }
                        break;

                    case TipoEtapa.Ahorcado:
                        <div class="content-card hangman-card w-100 text-center text-dark">
                            <h5 class="mb-4">Adivina la palabra</h5>
                            <div id="ahorcadoPalabra" class="hangman-word fs-1 mb-4"></div>

                            <div class="d-flex justify-content-center mb-4">
                                <svg id="ahorcadoCanvas" width="150" height="200" class="hangman-canvas">
                                    <line x1="10" y1="190" x2="140" y2="190" stroke="black" stroke-width="3" />
                                    <line x1="40" y1="190" x2="40" y2="20" stroke="black" stroke-width="3" />
                                    <line x1="40" y1="20" x2="100" y2="20" stroke="black" stroke-width="3" />
                                    <line x1="100" y1="20" x2="100" y2="50" stroke="black" stroke-width="3" />
                                    <circle id="head" cx="100" cy="70" r="20" stroke="black" stroke-width="3" fill="none" style="display:none" />
                                    <line id="body" x1="100" y1="90" x2="100" y2="140" stroke="black" stroke-width="3" style="display:none" />
                                    <line id="armLeft" x1="100" y1="100" x2="70" y2="120" stroke="black" stroke-width="3" style="display:none" />
                                    <line id="armRight" x1="100" y1="100" x2="130" y2="120" stroke="black" stroke-width="3" style="display:none" />
                                    <line id="legLeft" x1="100" y1="140" x2="80" y2="170" stroke="black" stroke-width="3" style="display:none" />
                                    <line id="legRight" x1="100" y1="140" x2="120" y2="170" stroke="black" stroke-width="3" style="display:none" />
                                </svg>
                            </div>

                            <div id="ahorcadoLetras" class="d-flex flex-wrap justify-content-center gap-2"></div>
                            <div id="ahorcadoMensaje" class="mt-3 fw-bold"></div>
                        </div>
                        break;

                    case TipoEtapa.SopaDeLetras:
                        <div class="content-card wordsearch-card w-100 text-center text-dark">
                            <h5 class="mb-4">Encuentra las palabras</h5>
                            <div class="palabras-lista mb-3">
                                <div id="sopaPalabras"></div>
                            </div>
                            <div id="sopaContainer" class="d-flex justify-content-center mb-3"></div>
                            <div id="sopaMensaje" class="fw-bold"></div>
                        </div>
                        break;

                    case TipoEtapa.EncuentraLaPalabra:
                        <div class="content-card find-word-card w-100 text-dark">
                            <h5 class="text-center mb-4">Encuentra las palabras clave</h5>

                            <p class="consigna mb-3 p-3">
                                Lee atentamente el texto y haz clic sobre todas las palabras importantes que consideres clave.
                            </p>

                            <div class="contador-palabras mb-3">
                                Palabras restantes: <span id="encRestantes">@palabrasClaveEncuentra.Count</span>
                            </div>

                            <div id="encTexto" class="actividad mb-3 p-3 border rounded"></div>
                            <div id="encMensaje" class="fw-bold text-center mb-3"></div>
                        </div>
                        break;
                }
            </div>

            <form method="post" id="continuarForm" class="text-center">
                <input type="hidden" name="ModuloId" value="@Model.Modulo.Id" />
                <button type="submit" id="continuarBtn" class="continue-btn">
                    Continuar
                </button>
            </form>
        </div>
    </div>

    @* Scripts existentes sin cambios *@
    @if (Model.EtapaActual.Tipo == TipoEtapa.Quiz && quizData.Count > 0)
    {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const quizData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(quizData));
                const continuarForm = document.getElementById("continuarForm");
                const quizError = document.getElementById("quizResult");

                function calcularScore() {
                    let score = 0;
                    for (let i = 0; i < quizData.length; i++) {
                        const radios = document.getElementsByName(`pregunta${i + 1}`);
                        let answered = false;
                        radios.forEach(r => {
                            if (r.checked) answered = true;
                            if (r.checked && (parseInt(r.value) + 1) === quizData[i].Correcta) score++;
                        });
                        if (!answered) return -1;
                    }
                    return score;
                }

                continuarForm.addEventListener("submit", (e) => {
                    const score = calcularScore();
                    if(score === -1) {
                        e.preventDefault();
                        quizError.innerHTML = `<div class="alert alert-danger">Debes responder todas las preguntas antes de continuar.</div>`;
                        return;
                    }
                    const porcentaje = (score / quizData.length) * 100;
                    if(porcentaje < 90) {
                        e.preventDefault();
                        quizError.innerHTML = `<div class="alert alert-danger">Debes responder al menos el 90% correctamente para continuar. Has respondido ${score} de ${quizData.length}.</div>`;
                        return;
                    }
                    quizError.innerHTML = "";
                });
            });
        </script>
    }

    @if (Model.EtapaActual.Tipo == TipoEtapa.Ahorcado && !string.IsNullOrEmpty(Model.EtapaActual.ContenidoTexto))
    {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const palabra = "@Model.EtapaActual.ContenidoTexto".toUpperCase();
                const letras = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
                const letrasDiv = document.getElementById("ahorcadoLetras");
                const palabraDiv = document.getElementById("ahorcadoPalabra");
                const mensajeDiv = document.getElementById("ahorcadoMensaje");
                const continuarForm = document.getElementById("continuarForm");

                let errores = 0;
                let maxErrores = 6;
                let progreso = palabra.split("").map(c => c === " " ? " " : "_");

                function mostrarProgreso() {
                    palabraDiv.innerHTML = progreso.map(c => c === " " ? "&nbsp;" : `<span style="display:inline-block; min-width:20px;">${c}</span>`).join("");
                }
                mostrarProgreso();

                letras.forEach(l => {
                    const btn = document.createElement("button");
                    btn.innerText = l;
                    btn.className = "btn btn-outline-primary letter-btn";
                    btn.onclick = (ev) => {
                        ev.preventDefault();
                        jugarLetra(l, btn);
                    };
                    letrasDiv.appendChild(btn);
                });

                function jugarLetra(letra, btn) {
                    btn.disabled = true;
                    mensajeDiv.innerHTML = "";
                    if (palabra.includes(letra)) {
                        for (let i = 0; i < palabra.length; i++) {
                            if (palabra[i] === letra) {
                                progreso[i] = letra;
                            }
                        }
                        mostrarProgreso();
                        if (!progreso.includes("_")) {
                            mensajeDiv.innerHTML = `<div class="alert alert-success">¡Ganaste! La palabra era <b>${palabra}</b>.</div>`;
                        }
                    } else {
                        errores++;
                        dibujarAhorcado(errores);
                        if (errores >= maxErrores) {
                            mensajeDiv.innerHTML = `
                                <div class="alert alert-danger">Perdiste. La palabra era <b>${palabra}</b>.</div>
                                <button id="btnReiniciar" class="btn btn-secondary mt-2">Reiniciar</button>
                            `;
                            deshabilitarBotones();
                            document.getElementById("btnReiniciar").addEventListener("click", (ev) => {
                                ev.preventDefault();
                                reiniciarJuego();
                            });
                        }
                    }
                }

                function reiniciarJuego() {
                    errores = 0;
                    progreso = palabra.split("").map(c => c === " " ? " " : "_");
                    mostrarProgreso();
                    mensajeDiv.innerHTML = "";
                    document.querySelectorAll("#ahorcadoCanvas [id]").forEach(p => p.style.display = "none");
                    document.querySelectorAll("#ahorcadoLetras button").forEach(b => b.disabled = false);
                }

                function deshabilitarBotones() {
                    document.querySelectorAll("#ahorcadoLetras button").forEach(b => b.disabled = true);
                }

                function dibujarAhorcado(err) {
                    const partes = ["head","body","armLeft","armRight","legLeft","legRight"];
                    if (err <= partes.length) {
                        document.getElementById(partes[err-1]).style.display = "block";
                    }
                }

                continuarForm.addEventListener("submit", (e) => {
                    if (progreso.includes("_")) {
                        e.preventDefault();
                        mensajeDiv.innerHTML = `<div class="alert alert-danger">Debes adivinar la palabra para continuar.</div>`;
                        return;
                    }
                    if (errores >= maxErrores) {
                        e.preventDefault();
                        mensajeDiv.innerHTML = `<div class="alert alert-danger">No puedes continuar, perdiste el juego. Reinicia para intentarlo de nuevo.</div>`;
                        return;
                    }
                });
            });
        </script>
    }

    @if (Model.EtapaActual.Tipo == TipoEtapa.SopaDeLetras && !string.IsNullOrEmpty(Model.EtapaActual.ContenidoJson))
    {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const palabras = @Html.Raw(Model.EtapaActual.ContenidoJson);
                const gridSize = 12;
                const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(""));

                const sopaContainer = document.getElementById("sopaContainer");
                const palabrasDiv = document.getElementById("sopaPalabras");
                const mensajeDiv = document.getElementById("sopaMensaje");
                const continuarForm = document.getElementById("continuarForm");

                let encontradas = [];

                palabrasDiv.innerHTML = `<b>Palabras a encontrar:</b><br>${palabras.map(p => `<span class='badge bg-secondary mx-1 mt-1' id='pal-${p}'>${p}</span>`).join("")}`;

                function colocarPalabra(palabra) {
                    palabra = palabra.toUpperCase();
                    let placed = false;
                    while (!placed) {
                        const vertical = Math.random() > 0.5;
                        const row = Math.floor(Math.random() * gridSize);
                        const col = Math.floor(Math.random() * gridSize);
                        if (vertical && row + palabra.length <= gridSize) {
                            let ok = true;
                            for (let i = 0; i < palabra.length; i++) {
                                if (grid[row + i][col] && grid[row + i][col] !== palabra[i]) { ok = false; break; }
                            }
                            if (ok) { for (let i = 0; i < palabra.length; i++) grid[row + i][col] = palabra[i]; placed = true; }
                        } else if (!vertical && col + palabra.length <= gridSize) {
                            let ok = true;
                            for (let i = 0; i < palabra.length; i++) {
                                if (grid[row][col + i] && grid[row][col + i] !== palabra[i]) { ok = false; break; }
                            }
                            if (ok) { for (let i = 0; i < palabra.length; i++) grid[row][col + i] = palabra[i]; placed = true; }
                        }
                    }
                }
                palabras.forEach(p => colocarPalabra(p));

                const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                for (let r = 0; r < gridSize; r++) {
                    for (let c = 0; c < gridSize; c++) {
                        if (!grid[r][c]) grid[r][c] = letters[Math.floor(Math.random() * letters.length)];
                    }
                }

                const table = document.createElement("table");
                table.className = "sopa-table table table-bordered border-dark";
                for (let r = 0; r < gridSize; r++) {
                    const row = document.createElement("tr");
                    for (let c = 0; c < gridSize; c++) {
                        const cell = document.createElement("td");
                        cell.innerText = grid[r][c];
                        cell.className = "p-1 text-center sopaCell";
                        cell.style.cursor = "pointer";
                        cell.dataset.row = r;
                        cell.dataset.col = c;
                        row.appendChild(cell);
                    }
                    table.appendChild(row);
                }
                sopaContainer.appendChild(table);

                let seleccion = [];
                document.querySelectorAll(".sopaCell").forEach(cell => {
                    cell.addEventListener("click", () => {
                        mensajeDiv.innerHTML = "";
                        if (cell.classList.contains("bg-success")) return;

                        if (cell.classList.contains("bg-warning")) {
                            cell.classList.remove("bg-warning");
                            seleccion = seleccion.filter(c => c !== cell);
                        } else {
                            cell.classList.add("bg-warning");
                            seleccion.push(cell);
                        }
                        verificarPalabra();
                    });
                });

                function verificarPalabra() {
                    const intento = seleccion.map(c => c.innerText).join("");
                    palabras.forEach(p => {
                        if (intento.endsWith(p.toUpperCase())) {
                            document.querySelector(`#pal-${p}`).classList.replace("bg-secondary", "bg-success");
                            encontradas.push(p);
                            seleccion.forEach(c => {
                                c.classList.remove("bg-warning");
                                c.classList.add("bg-success");
                                c.style.pointerEvents = "none";
                            });
                            seleccion = [];
                            if (encontradas.length === palabras.length) {
                                mensajeDiv.innerHTML = `<div class="alert alert-success">¡Encontraste todas las palabras!</div>`;
                            }
                        }
                    });
                }

                continuarForm.addEventListener("submit", (e) => {
                    if (encontradas.length < palabras.length) {
                        e.preventDefault();
                        mensajeDiv.innerHTML = `<div class="alert alert-danger">Debes encontrar todas las palabras para continuar.</div>`;
                    }
                });
            });
        </script>
    }


    @* Script encuentra la palabra *@
    @if (Model.EtapaActual.Tipo == TipoEtapa.EncuentraLaPalabra && !string.IsNullOrEmpty(Model.EtapaActual.ContenidoJson))
    {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const encTextoDiv = document.getElementById("encTexto");
                const encMensajeDiv = document.getElementById("encMensaje");
                const continuarForm = document.getElementById("continuarForm");

                const texto = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(textoEncuentraPalabra));
                const palabrasClave = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(palabrasClaveEncuentra));

                let encontradas = [];

                // Aplicar cursor siempre manito al contenedor
                encTextoDiv.style.cursor = "pointer";

                // Renderizar texto con spans para palabras clave
                function renderTexto() {
                    let textoHTML = texto;
                    palabrasClave.forEach(palabra => {
                        const regex = new RegExp(`\\b(${palabra})\\b`, 'gi');
                        // Sin negrita ni estilos de cursor aquí
                        textoHTML = textoHTML.replace(regex, `<span class="palabraClave">$1</span>`);
                    });
                    encTextoDiv.innerHTML = textoHTML;

                    document.querySelectorAll(".palabraClave").forEach(span => {
                        span.addEventListener("click", () => {
                            const palabra = span.innerText.toLowerCase();

                            // Si ya fue encontrada, no hacer nada
                            if (span.classList.contains("bg-success")) return;

                            // Marcar como encontrada → verde y bloqueada
                            span.classList.add("bg-success", "text-white");
                            span.style.pointerEvents = "none";
                            encontradas.push(palabra);
                            // Actualizar contador
            document.getElementById("encRestantes").innerText = palabrasClave.length - encontradas.length;

                            encMensajeDiv.innerHTML = "";

                            // Mensaje si encontró todas las palabras
                            if (encontradas.length === palabrasClave.length) {
                                encMensajeDiv.innerHTML = `<span class="text-success">🎉 ¡Encontraste todas las palabras!</span>`;
                            }
                        });
                    });
                }

                renderTexto();

                // Validación al presionar Continuar
                continuarForm.addEventListener("submit", (e) => {
                    if (encontradas.length < palabrasClave.length) {
                        e.preventDefault();
                        encMensajeDiv.innerHTML = `<span class="text-danger">Debes encontrar todas las palabras clave para continuar.</span>`;
                    }
                });
            });
        </script>
    }



 

}

else
{
    <div class="container py-5 text-center">
        <p class="text-danger fw-bold">Módulo o etapa no encontrado.</p>
    </div>
}
