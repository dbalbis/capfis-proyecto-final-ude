@page
@model CAPFIS.Pages.Admin.Etapas.EditarEtapaModuloModel
@using CAPFIS.Models
@{
    Layout = "/Pages/Shared/_LayoutAdmin.cshtml";
    ViewData["Title"] = "Editar Etapa";
}

<div class="row">
    <div class="col-md-6 mx-auto">
        <h3 style="color: #FFA500;">Editar Etapa de Módulo</h3>

        <!-- Separador -->
        <hr class="text-secondary my-3"
            style="border: none; border-bottom: 2px solid rgba(255, 165, 0, 0.4); margin: 0 1rem 0.5rem 1rem;" />

        <partial name="_StatusMessage" model="Model.StatusMessage" />
        <div id="statusMessageJS" class="text-danger mb-2"></div>

        <!-- Selector de etapa -->
        <form method="get">
            <label for="etapaSelect" class="form-label">Seleccione una etapa:</label>
            <select class="form-select mb-3" id="etapaSelect" name="SelectedEtapaId" onchange="this.form.submit()">
                <option value="">-- Seleccione --</option>
                @foreach (var etapa in Model.EtapasList)
                {
                    <option value="@etapa.Value" selected="@(etapa.Value == Model.SelectedEtapaId?.ToString() ? true : (bool?)null)">
                        @etapa.Text
                    </option>
                }
            </select>
        </form>

        <!-- Separador -->
        <hr class="text-secondary my-3"
            style="border: none; border-bottom: 2px solid rgba(255, 165, 0, 0.4); margin: 0 1rem 0.5rem 1rem;" />

        @if (Model.SelectedEtapaId != null)
        {
            <form method="post" id="formEditarEtapa">
                <input type="hidden" asp-for="SelectedEtapaId" />
                <input type="hidden" asp-for="Input.ContenidoJson" id="contenidoJsonHidden" />

                <!-- Módulo -->
                <div class="form-floating mb-3">
                    <select asp-for="Input.ModuloInteractivoId" class="form-select" asp-items="Model.ModulosList"></select>
                    <label asp-for="Input.ModuloInteractivoId">Módulo</label>
                    <span asp-validation-for="Input.ModuloInteractivoId" class="text-danger"></span>
                </div>

                <!-- Título -->
                <div class="form-floating mb-3">
                    <input asp-for="Input.Titulo" class="form-control" placeholder="Título de la etapa" />
                    <label asp-for="Input.Titulo">Título de la etapa</label>
                    <span asp-validation-for="Input.Titulo" class="text-danger"></span>
                </div>

                <!-- Tipo (solo lectura) -->
                <div class="form-floating mb-3">
                    <input asp-for="Input.Tipo" class="form-control" readonly />
                    <label asp-for="Input.Tipo">Tipo de Etapa</label>
                </div>

                <!-- Campos según tipo -->
                <div id="contenidoVideo" class="mb-3" style="display:none;">
                    <label class="form-label">URL del Video</label>
                    <input asp-for="Input.ContenidoUrl" class="form-control" placeholder="https://www.youtube.com/watch?v=..." />
                </div>

                <div id="contenidoAhorcado" class="mb-3" style="display:none;">
                    <label class="form-label">Palabra a adivinar</label>
                    <input asp-for="Input.ContenidoTexto" class="form-control" />
                </div>

                <!-- Quiz -->
                <div id="contenidoQuiz" class="mb-3" style="display:none;">
                    <label class="form-label">Preguntas del Quiz</label>
                    <div id="preguntasList"></div>
                    <button type="button" class="btn btn-outline-warning btn-sm mt-2" id="agregarPreguntaBtn">Agregar Pregunta</button>
                </div>

                <div id="contenidoSopa" class="mb-3" style="display:none;">
                    <label class="form-label">Palabras de la Sopa de Letras</label>
                    <div id="palabrasSopaList"></div>
                    <button type="button" class="btn btn-outline-warning btn-sm mt-2" id="agregarPalabraSopaBtn">Agregar palabra</button>
                </div>

                <div id="contenidoEncuentra" class="mb-3" style="display:none;">
                    <label class="form-label">Texto base</label>
                    <textarea id="encuentraTexto" asp-for="Input.ContenidoTexto" class="form-control" rows="5"></textarea>

                    <label class="form-label mt-2">Palabras clave</label>
                    <div id="palabrasClaveList"></div>
                    <button type="button" class="btn btn-outline-warning btn-sm mt-2" id="agregarPalabraBtn">Agregar palabra</button>
                </div>

                <button type="submit"
                        class="btn btn-outline-warning fw-bold px-4 login-btn w-100 mt-3">
                    Guardar Etapa
                </button>
            </form>
        }
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const tipo = "@Model.Input.Tipo";
        const contenidoVideo = document.getElementById('contenidoVideo');
        const contenidoAhorcado = document.getElementById('contenidoAhorcado');
        const contenidoQuiz = document.getElementById('contenidoQuiz');
        const contenidoSopa = document.getElementById('contenidoSopa');
        const contenidoEncuentra = document.getElementById('contenidoEncuentra');
        const hiddenJson = document.getElementById("contenidoJsonHidden");

        // Mostrar campos según tipo
        switch(tipo){
            case "Video": contenidoVideo.style.display="block"; break;
            case "Ahorcado": contenidoAhorcado.style.display="block"; break;
            case "Quiz": contenidoQuiz.style.display="block"; break;
            case "SopaDeLetras": contenidoSopa.style.display="block"; break;
            case "EncuentraLaPalabra": contenidoEncuentra.style.display="block"; break;
        }

                // ===================================================
        // QUIZ - Editar Etapa con numeración
        // ===================================================
        document.addEventListener("DOMContentLoaded", () => {
            if(tipo !== "Quiz") return;

            const preguntasList = document.getElementById("preguntasList");
            const btnAgregarPregunta = document.getElementById("agregarPreguntaBtn");
            let quizData = [];

            // Solo parsear hiddenJson una vez al inicio
            try { quizData = JSON.parse(hiddenJson.value || "[]"); } catch(e){ quizData = []; }

            // Función para enumerar preguntas
            function renderizarNumerosPreguntas() {
                Array.from(preguntasList.children).forEach((div, idx) => {
                    let numeroSpan = div.querySelector('.numeroPregunta');
                    if(!numeroSpan){
                        numeroSpan = document.createElement('span');
                        numeroSpan.classList.add('numeroPregunta', 'fw-bold', 'me-2');
                        div.prepend(numeroSpan); // colocar al inicio del div
                    }
                    numeroSpan.innerText = `${idx + 1}.`;
                });
            }

            function renderQuiz() {
                preguntasList.innerHTML = "";
                quizData.forEach((p, idx) => {
                    const div = document.createElement("div");
                    div.className = "border p-2 mb-2 rounded";

                    // Input pregunta
                    const inputPregunta = document.createElement("input");
                    inputPregunta.type = "text";
                    inputPregunta.className = "form-control mb-1";
                    inputPregunta.placeholder = "Texto de la pregunta";
                    inputPregunta.value = p.Pregunta || "";
                    inputPregunta.addEventListener("input", () => { p.Pregunta = inputPregunta.value; actualizarHidden(); });
                    div.appendChild(inputPregunta);

                    // Inputs respuestas
                    p.Respuestas.forEach((r, i) => {
                        const inputR = document.createElement("input");
                        inputR.type = "text";
                        inputR.className = "form-control mb-1";
                        inputR.placeholder = `Respuesta ${i+1}`;
                        inputR.value = r || "";
                        inputR.addEventListener("input", () => { p.Respuestas[i] = inputR.value; actualizarHidden(); });
                        div.appendChild(inputR);
                    });

                    // Input respuesta correcta
                    const inputCorrecta = document.createElement("input");
                    inputCorrecta.type = "number";
                    inputCorrecta.min = 1;
                    inputCorrecta.max = p.Respuestas.length;
                    inputCorrecta.className = "form-control mb-1";
                    inputCorrecta.placeholder = `Número de respuesta correcta (1-${p.Respuestas.length})`;
                    inputCorrecta.value = p.Correcta || "";
                    inputCorrecta.addEventListener("input", () => { p.Correcta = parseInt(inputCorrecta.value) || null; actualizarHidden(); });
                    div.appendChild(inputCorrecta);

                    // Botón eliminar
                    const btnEliminar = document.createElement("button");
                    btnEliminar.type = "button";
                    btnEliminar.className = "btn btn-outline-danger btn-sm mt-1";
                    btnEliminar.innerText = "Eliminar";
                    btnEliminar.addEventListener("click", () => {
                        quizData.splice(idx, 1);
                        renderQuiz();
                    });
                    div.appendChild(btnEliminar);

                    preguntasList.appendChild(div);
                });

                // Actualizar numeración al final
                renderizarNumerosPreguntas();
            }

            function actualizarHidden() {
                hiddenJson.value = JSON.stringify(quizData);
            }

            // Listener de agregar pregunta
            btnAgregarPregunta.addEventListener("click", () => {
                quizData.push({Pregunta:"", Respuestas:["","",""], Correcta:null});
                renderQuiz();
            });

            // Render inicial
            renderQuiz();
        });



        // ===================================================
        // SOPA DE LETRAS
        // ===================================================
        const palabrasSopaList = document.getElementById("palabrasSopaList");
        const btnAgregarSopa = document.getElementById("agregarPalabraSopaBtn");
        let sopaData = [];
        try { sopaData = JSON.parse(hiddenJson.value || "[]"); } catch(e){ sopaData=[]; }

        function renderSopa(){
            palabrasSopaList.innerHTML="";
            sopaData.forEach((pal,idx)=>{
                const div = document.createElement("div");
                div.className="input-group mb-1";
                div.innerHTML=`
                    <input type="text" class="form-control" value="${pal}" onchange="sopaData[${idx}]=this.value"/>
                    <button class="btn btn-outline-danger" type="button" onclick="sopaData.splice(${idx},1); renderSopa()">X</button>
                `;
                palabrasSopaList.appendChild(div);
            });
            hiddenJson.value = JSON.stringify(sopaData);
        }
        if(tipo==="SopaDeLetras"){ renderSopa(); }
        btnAgregarSopa?.addEventListener("click",()=>{ sopaData.push(""); renderSopa(); });

        // ===================================================
        // ENCUENTRA LA PALABRA
        // ===================================================
        const palabrasClaveList = document.getElementById("palabrasClaveList");
        const btnAgregarClave = document.getElementById("agregarPalabraBtn");
        const textareaTexto = document.getElementById("encuentraTexto");

        let encuentraData = { Texto: "", PalabrasClave: [] };
        try {
            const parsed = JSON.parse(hiddenJson.value || "{}");
            if(parsed.Texto) encuentraData.Texto = parsed.Texto;
            if(parsed.PalabrasClave) encuentraData.PalabrasClave = parsed.PalabrasClave;
        } catch(e){}
        if(textareaTexto) textareaTexto.value = encuentraData.Texto;

        function renderEncuentra(){
            palabrasClaveList.innerHTML = "";
            encuentraData.Texto = textareaTexto.value;
            encuentraData.PalabrasClave.forEach((pal, idx) => {
                const div = document.createElement("div");
                div.className = "input-group mb-1";
                div.innerHTML = `
                    <input type="text" class="form-control" value="${pal}" onchange="encuentraData.PalabrasClave[${idx}]=this.value"/>
                    <button class="btn btn-outline-danger" type="button" onclick="encuentraData.PalabrasClave.splice(${idx},1); renderEncuentra()">X</button>
                `;
                palabrasClaveList.appendChild(div);
            });
            hiddenJson.value = JSON.stringify(encuentraData);
        }
        if(tipo==="EncuentraLaPalabra"){ renderEncuentra(); }
        btnAgregarClave?.addEventListener("click",()=>{ encuentraData.PalabrasClave.push(""); renderEncuentra(); });
        textareaTexto?.addEventListener("input",()=>{ encuentraData.Texto = textareaTexto.value; hiddenJson.value=JSON.stringify(encuentraData); });

        // ===================================================
        // ACTUALIZAR JSON ANTES DE ENVIAR
        // ===================================================
        document.querySelector("form#formEditarEtapa")?.addEventListener("submit", (e) => {
            const statusDiv = document.getElementById('statusMessageJS');
            statusDiv.innerText = ""; // limpiar mensaje previo

            if(tipo === "Quiz"){
                let valid = true;
                const data = [];

                Array.from(preguntasList.children).forEach(div => {
                    const inputs = div.querySelectorAll('input');
                    if(inputs.length < 5){
                        valid = false;
                        statusDiv.innerText = "❌ Error interno: pregunta incompleta.";
                        return;
                    }

                    const preguntaText = inputs[0].value.trim();
                    const respuestas = [
                        inputs[1].value.trim(),
                        inputs[2].value.trim(),
                        inputs[3].value.trim()
                    ];
                    const correcta = parseInt(inputs[4].value);

                    // Validación: pregunta y respuestas no vacías, correcta entre 1 y 3
                    if(!preguntaText || respuestas.some(r => !r) || isNaN(correcta) || correcta < 1 || correcta > 3){
                        valid = false;
                        statusDiv.innerText = "❌ Cada pregunta debe tener texto, 3 respuestas y una respuesta correcta entre 1 y 3.";
                        return;
                    }

                    data.push({
                        Pregunta: preguntaText,
                        Respuestas: respuestas,
                        Correcta: correcta
                    });
                });

                if(!valid){
                    e.preventDefault(); // evita enviar formulario
                    return false;
                }

                hiddenJson.value = JSON.stringify(data);
            }

            // Para los otros tipos, actualizamos igual
            if(tipo==="SopaDeLetras"){
                hiddenJson.value = JSON.stringify(sopaData);
            }
            if(tipo==="EncuentraLaPalabra"){
                hiddenJson.value = JSON.stringify(encuentraData);
            }
        });


    </script>
}
